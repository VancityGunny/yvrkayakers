import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:yvrkayakers/blocs/riverbeta/index.dart';

/// generate by https://javiercbk.github.io/json_to_dart/
class AutogeneratedTrip {
  final List<TripModel> results;

  AutogeneratedTrip({this.results});

  factory AutogeneratedTrip.fromJson(Map<String, dynamic> json) {
    List<TripModel> temp;
    if (json['results'] != null) {
      temp = <TripModel>[];
      json['results'].forEach((v) {
        temp.add(TripModel.fromJson(v as Map<String, dynamic>));
      });
    }
    return AutogeneratedTrip(results: temp);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (results != null) {
      data['results'] = results.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class TripModel extends Equatable {
  final String id;

  final RiverbetaShortModel river;

  final DateTime tripDate;
  final String note;

  final String startByUserId;

  final List<TripParticipantModel> participants;
  final int commentCount;

  TripModel(this.id, this.river, this.tripDate, this.note, this.participants,
      this.startByUserId, this.commentCount);

  @override
  List<Object> get props =>
      [id, river, tripDate, note, participants, startByUserId, commentCount];

  factory TripModel.fromJson(Map<String, dynamic> json) {
    return TripModel(
        null, //json['id'] as String,
        RiverbetaShortModel.fromFire(json['river']),
        json['tripDate'].toDate() as DateTime,
        json['meetingPlace'] as String,
        TripParticipantModel.fromJson(json['participants'])
            as List<TripParticipantModel>,
        json['startByUserId'] as String,
        json['commentCount'] as int);
  }
  factory TripModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return TripModel(
        doc.id,
        RiverbetaShortModel.fromJson(json['river']),
        (json['tripDate'] == null) ? null : json['tripDate'].toDate(),
        json['meetingPlace'] as String,
        json['participants']
            .map<TripParticipantModel>((e) => TripParticipantModel.fromJson(e))
            .toList(),
        //TripParticipant.fromJson(json['participants']) as List<TripParticipant>,
        json['startByUserId'] as String,
        json['commentCount'] as int);
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['river'] = river.toJson();
    data['tripDate'] = tripDate;
    data['meetingPlace'] = note;
    data['participants'] = participants.map((e) => e.toJson()).toList();
    data['startByUserId'] = startByUserId;
    data['commentCount'] = commentCount;
    return data;
  }
}

class TripCommentModel extends Equatable {
  final String userId;
  final String userDisplayName;
  final String userPicUrl;
  final String message;
  final DateTime createdDate;

  TripCommentModel(this.userId, this.userDisplayName, this.userPicUrl,
      this.message, this.createdDate);

  @override
  List<Object> get props =>
      [userId, userDisplayName, userPicUrl, message, createdDate];

  factory TripCommentModel.fromJson(Map<String, dynamic> json) {
    return TripCommentModel(
        json['userId'] as String,
        json['userDisplayName'] as String,
        json['userPicUrl'] as String,
        json['message'] as String,
        json['createdDate'].toDate() as DateTime);
  }
  factory TripCommentModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return TripCommentModel(
        json['userId'] as String,
        json['userDisplayName'] as String,
        json['userPicUrl'] as String,
        json['message'] as String,
        json['createdDate'].toDate() as DateTime);
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['userId'] = userId;
    data['userDisplayName'] = userDisplayName;
    data['userPicUrl'] = userPicUrl;
    data['message'] = message;
    data['createdDate'] = createdDate;
    return data;
  }
}

class TripParticipantModel extends Equatable {
  final String userId;
  final String userDisplayName;
  final bool needRide;
  final int availableSpace;
  final double skillLevel;
  final double skillLevelVerified;
  final String userPhotoUrl;

  TripParticipantModel(
      this.userId,
      this.userDisplayName,
      this.needRide,
      this.availableSpace,
      this.skillLevel,
      this.skillLevelVerified,
      this.userPhotoUrl);

  @override
  List<Object> get props => [
        userId,
        userDisplayName,
        needRide,
        availableSpace,
        skillLevel,
        skillLevelVerified,
        userPhotoUrl
      ];

  factory TripParticipantModel.fromJson(Map<String, dynamic> json) {
    return TripParticipantModel(
        json['userId'] as String,
        json['userDisplayName'] as String,
        json['needRide'] as bool,
        json['availableSpace'] as int,
        double.tryParse(json['skillLevel'].toString()),
        double.tryParse(json['skillLevelVerified'].toString()),
        json['userPhotoUrl'] as String);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['userId'] = userId;
    data['userDisplayName'] = userDisplayName;
    data['needRide'] = needRide;
    data['availableSpace'] = availableSpace;
    data['skillLevel'] = skillLevel;
    data['skillLevelVerified'] = skillLevelVerified;
    data['userPhotoUrl'] = userPhotoUrl;
    return data;
  }
}
