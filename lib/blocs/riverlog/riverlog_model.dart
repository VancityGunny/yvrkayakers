import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:yvrkayakers/blocs/riverbeta/index.dart';

/// generate by https://javiercbk.github.io/json_to_dart/
class AutogeneratedRiverlog {
  final List<RiverlogModel> results;

  AutogeneratedRiverlog({this.results});

  factory AutogeneratedRiverlog.fromJson(Map<String, dynamic> json) {
    List<RiverlogModel> temp;
    if (json['results'] != null) {
      temp = <RiverlogModel>[];
      json['results'].forEach((v) {
        temp.add(RiverlogModel.fromJson(v as Map<String, dynamic>));
      });
    }
    return AutogeneratedRiverlog(results: temp);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (results != null) {
      data['results'] = results.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class SwimmerLog extends Equatable {
  final String swimmerId;
  final String rescuerId;
  SwimmerLog(this.swimmerId, this.rescuerId);
  @override
  // TODO: implement props
  List<Object> get props => [swimmerId, rescuerId];
}

class UserRiverlogModel extends Equatable {
  final String uid;
  final List<RiverlogShortModel> logSummary;
  UserRiverlogModel(this.uid, this.logSummary);

  @override
  // TODO: implement props
  List<Object> get props => [uid, logSummary];

  factory UserRiverlogModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return UserRiverlogModel(
        doc.id,
        (json['logSummary'] == null)
            ? List<RiverlogShortModel>()
            : json['logSummary']
                .map<RiverlogShortModel>((e) => RiverlogShortModel.fromJson(e))
                .toList());
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['logSummary'] = logSummary.map((e) => e.toJson()).toList();
    return data;
  }
}

class RiverlogShortModel extends Equatable {
  final String id;
  final double waterLevel;
  final DateTime logDate;
  final RiverbetaShortModel river;
  RiverlogShortModel(this.id, this.waterLevel, this.logDate, this.river);

  factory RiverlogShortModel.fromJson(Map<String, dynamic> json) {
    return RiverlogShortModel(
        json['id'] as String,
        json['waterLevel'] as double,
        json['logDate'].toDate(),
        RiverbetaShortModel.fromJson(json['river']));
  }
  factory RiverlogShortModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return RiverlogShortModel(
        json['id'] as String,
        json['waterLevel'] as double,
        json['logDate'].toDate(),
        RiverbetaShortModel.fromJson(json['river']));
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['waterLevel'] = waterLevel;
    data['logDate'] = logDate;
    data['river'] = river.toJson();
    return data;
  }

  // TODO: implement props
  @override
  List<Object> get props => [id, waterLevel, logDate, river];
}

class RiverlogModel extends RiverlogShortModel {
  final String tripId;
  final String uid;
  final bool didSwim;
  final bool didRescue;
  final List<String> swimmerRescued; //store userId
  final List<String> rescuedBy; // store userId
  final String note;
  final int enjoyment; // rating of enjoyment 1-5

  final List<String> friends; // store userId

  int totalRound; // count how many time user run any river
  int riverRound; // count how many time user run this river

  RiverlogModel(
      id,
      this.tripId,
      this.uid,
      this.didSwim,
      this.didRescue,
      this.swimmerRescued,
      this.rescuedBy,
      this.note,
      this.enjoyment,
      waterLevel,
      logDate,
      this.friends,
      this.totalRound,
      this.riverRound,
      river)
      : super(id, waterLevel, logDate, river);

  @override
  List<Object> get props => [
        id,
        tripId,
        uid,
        didSwim,
        didRescue,
        swimmerRescued,
        rescuedBy,
        note,
        enjoyment,
        waterLevel,
        logDate,
        friends,
        totalRound,
        riverRound,
        river
      ];

  factory RiverlogModel.fromJson(Map<String, dynamic> json) {
    return RiverlogModel(
        json['id'] as String,
        json['tripId'] as String,
        json['userId'] as String,
        json['didSwim'] as bool,
        json['didRescue'] as bool,
        json['swimmerRescued'] as List<String>,
        json['rescuedBy'] as List<String>,
        json['note'] as String,
        json['enjoyment'] as int,
        json['waterLevel'] as double,
        json['logDate'].toDate(),
        json['friends'] as List<String>,
        json['totalRound'] as int,
        json['riverRound'] as int,
        RiverbetaModel.fromJson(json['river']));
  }

  factory RiverlogModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return RiverlogModel(
        doc.id,
        json['tripId'] as String,
        json['userId'] as String,
        json['didSwim'] as bool,
        json['didRescue'] as bool,
        json['swimmerRescued'] as List<String>,
        json['rescuedBy'] as List<String>,
        json['note'] as String,
        json['enjoyment'] as int,
        json['waterLevel'] as double,
        (json['logDate'] == null) ? null : json['logDate'].toDate(),
        json['friends'] as List<String>,
        json['totalRound'] as int,
        json['riverRound'] as int,
        RiverbetaModel.fromJson(json['river']));
  }
  RiverlogShortModel toRiverlogShortModel() {
    return RiverlogShortModel(id, waterLevel, logDate, river);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['tripId'] = tripId;
    data['userId'] = uid;
    data['didSwim'] = didSwim;
    data['didRescue'] = didRescue;
    data['swimmerRescued'] = swimmerRescued;
    data['rescuedBy'] = rescuedBy;
    data['note'] = note;
    data['enjoyment'] = enjoyment;
    data['waterLevel'] = waterLevel;
    data['logDate'] = logDate;
    data['friends'] = friends;
    data['totalRound'] = totalRound;
    data['riverRound'] = riverRound;
    data['river'] = river.toJson();
    return data;
  }
}
