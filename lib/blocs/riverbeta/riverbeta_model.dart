import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:geoflutterfire/geoflutterfire.dart';

/// generate by https://javiercbk.github.io/json_to_dart/
class AutogeneratedRiverbeta {
  final List<RiverbetaModel> results;

  AutogeneratedRiverbeta({this.results});

  factory AutogeneratedRiverbeta.fromJson(Map<String, dynamic> json) {
    List<RiverbetaModel> temp;
    if (json['results'] != null) {
      temp = <RiverbetaModel>[];
      json['results'].forEach((v) {
        temp.add(RiverbetaModel.fromJson(v as Map<String, dynamic>));
      });
    }
    return AutogeneratedRiverbeta(results: temp);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (results != null) {
      data['results'] = results.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class RiverbetaModel extends Equatable {
  final String id;
  final String riverName;
  final String sectionName;
  final double difficulty; // 2.75 for grade III- and 3.25 for grade III+
  final GeoFirePoint putInLocation;
  final GeoFirePoint takeOutLocation;
  final double minLevel; // minimum runnable flow in cms
  final double maxLevel; // maximum runnable flow in cms
  final String gaugeUnit;

  RiverbetaModel(
      this.id,
      this.riverName,
      this.sectionName,
      this.difficulty,
      this.putInLocation,
      this.takeOutLocation,
      this.minLevel,
      this.maxLevel,
      this.gaugeUnit);

  @override
  List<Object> get props => [
        id,
        riverName,
        sectionName,
        difficulty,
        putInLocation,
        takeOutLocation,
        minLevel,
        maxLevel,
        gaugeUnit
      ];

  factory RiverbetaModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return RiverbetaModel(
        doc.id,
        json['riverName'] as String,
        json['sectionName'] as String,
        json['difficulty'] as double,
        json['putInLocation'] as GeoFirePoint,
        json['takeOutLocation'] as GeoFirePoint,
        json['minFlow'] as double,
        json['maxFlow'] as double,
        json['gaugeUnit'] as String);
  }

  factory RiverbetaModel.fromJson(Map<String, dynamic> json) {
    return RiverbetaModel(
        null,
        json['riverName'] as String,
        json['sectionName'] as String,
        json['difficulty'] as double,
        json['putInLocation'] as GeoFirePoint,
        json['takeOutLocation'] as GeoFirePoint,
        json['minFlow'] as double,
        json['maxFlow'] as double,
        json['gaugeUnit'] as String);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    //data['id'] = id;
    data['riverName'] = riverName;
    data['sectionName'] = sectionName;
    data['difficulty'] = difficulty;
    data['putInLocation'] = putInLocation.data;
    data['takeOutLocation'] = takeOutLocation.data;
    data['minFlow'] = minLevel;
    data['maxFlow'] = maxLevel;
    data['gaugeUnit'] = gaugeUnit;
    return data;
  }
}
