import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:geoflutterfire/geoflutterfire.dart';

/// generate by https://javiercbk.github.io/json_to_dart/
class AutogeneratedRiverbeta {
  final List<RiverbetaModel> results;

  AutogeneratedRiverbeta({this.results});

  factory AutogeneratedRiverbeta.fromJson(Map<String, dynamic> json) {
    List<RiverbetaModel> temp;
    if (json['results'] != null) {
      temp = <RiverbetaModel>[];
      json['results'].forEach((v) {
        temp.add(RiverbetaModel.fromJson(v as Map<String, dynamic>));
      });
    }
    return AutogeneratedRiverbeta(results: temp);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (results != null) {
      data['results'] = results.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class RiverbetaModel extends Equatable {
  final String id;
  final String riverName;
  final String sectionName;
  final String thumbnailUrl;
  final double difficulty; // 2.75 for grade III- and 3.25 for grade III+
  final GeoFirePoint putInLocation;
  final GeoFirePoint takeOutLocation;
  final int minFlow; // minimum runnable flow in cms
  final int maxFlow; // maximum runnable flow in cms
  final double minDifficulty;
  final double maxDifficulty;
  final int minVisualLevel; // translate to visual gauge that available
  final int maxVisualLevel;

  RiverbetaModel(
      this.id,
      this.riverName,
      this.sectionName,
      this.thumbnailUrl,
      this.difficulty,
      this.putInLocation,
      this.takeOutLocation,
      this.minFlow,
      this.maxFlow,
      this.minDifficulty,
      this.maxDifficulty,
      this.minVisualLevel,
      this.maxVisualLevel);

  @override
  List<Object> get props => [
        id,
        riverName,
        sectionName,
        thumbnailUrl,
        difficulty,
        putInLocation,
        takeOutLocation,
        minFlow,
        maxFlow,
        minDifficulty,
        maxDifficulty,
        minVisualLevel,
        maxVisualLevel
      ];

  factory RiverbetaModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return RiverbetaModel(
        doc.id,
        json['riverName'] as String,
        json['sectionName'] as String,
        json['thumbnailUrl'] as String,
        json['difficulty'] as double,
        json['putInLocation'] as GeoFirePoint,
        json['takeOutLocation'] as GeoFirePoint,
        json['minFlow'] as int,
        json['maxFlow'] as int,
        json['minDifficulty'] as double,
        json['maxDifficulty'] as double,
        json['minVisualLevel'] as int,
        json['maxVisualLevel'] as int);
  }

  factory RiverbetaModel.fromJson(Map<String, dynamic> json) {
    return RiverbetaModel(
        null,
        json['riverName'] as String,
        json['sectionName'] as String,
        json['thumbnailUrl'] as String,
        json['difficulty'] as double,
        json['putInLocation'] as GeoFirePoint,
        json['takeOutLocation'] as GeoFirePoint,
        json['minFlow'] as int,
        json['maxFlow'] as int,
        json['minDifficulty'] as double,
        json['maxDifficulty'] as double,
        json['minVisualLevel'] as int,
        json['maxVisualLevel'] as int);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    //data['id'] = id;
    data['riverName'] = riverName;
    data['sectionName'] = sectionName;
    data['thumbnailUrl'] = thumbnailUrl;
    data['difficulty'] = difficulty;
    data['putInLocation'] = putInLocation;
    data['takeOutLocation'] = takeOutLocation;
    data['minFlow'] = minFlow;
    data['maxFlow'] = maxFlow;
    data['minDifficulty'] = minDifficulty;
    data['maxDifficulty'] = maxDifficulty;
    data['minVisualLevel'] = minVisualLevel;
    data['maxVisualLevel'] = maxVisualLevel;
    return data;
  }
}
