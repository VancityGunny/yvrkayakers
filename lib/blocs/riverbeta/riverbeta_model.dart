import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:geoflutterfire/geoflutterfire.dart';

/// generate by https://javiercbk.github.io/json_to_dart/
class AutogeneratedRiverbeta {
  final List<RiverbetaModel> results;

  AutogeneratedRiverbeta({this.results});

  factory AutogeneratedRiverbeta.fromJson(Map<String, dynamic> json) {
    List<RiverbetaModel> temp;
    if (json['results'] != null) {
      temp = <RiverbetaModel>[];
      json['results'].forEach((v) {
        temp.add(RiverbetaModel.fromJson(v as Map<String, dynamic>));
      });
    }
    return AutogeneratedRiverbeta(results: temp);
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (results != null) {
      data['results'] = results.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class RiverbetaShortModel extends Equatable {
  final String id;
  final String riverName;
  final String sectionName;
  final double difficulty; // 2.75 for grade III- and 3.25 for grade III+

  RiverbetaShortModel(
      this.id, this.riverName, this.sectionName, this.difficulty);
  @override
  List<Object> get props => [id, riverName, sectionName, difficulty];

  factory RiverbetaShortModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return RiverbetaShortModel(doc.id, json['riverName'] as String,
        json['sectionName'] as String, json['difficulty'] as double);
  }
  factory RiverbetaShortModel.fromJson(Map<String, dynamic> json) {
    return RiverbetaShortModel(null, json['riverName'] as String,
        json['sectionName'] as String, json['difficulty'] as double);
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['riverName'] = riverName;
    data['sectionName'] = sectionName;
    data['difficulty'] = difficulty;
    return data;
  }
}

class RiverbetaModel extends RiverbetaShortModel {
  final GeoFirePoint putInLocation;
  final GeoFirePoint takeOutLocation;
  final double minFlow; // minimum runnable flow in cms
  final double maxFlow; // maximum runnable flow in cms
  final String gaugeUnit;

  final double flowIncrement; // incremental for the gauge

  RiverbetaModel(
      id,
      riverName,
      sectionName,
      difficulty,
      this.putInLocation,
      this.takeOutLocation,
      this.minFlow,
      this.maxFlow,
      this.gaugeUnit,
      this.flowIncrement)
      : super(id, riverName, sectionName, difficulty);

  @override
  List<Object> get props => [
        id,
        riverName,
        sectionName,
        difficulty,
        putInLocation,
        takeOutLocation,
        minFlow,
        maxFlow,
        gaugeUnit,
        flowIncrement
      ];

  factory RiverbetaModel.fromFire(DocumentSnapshot doc) {
    var json = doc.data();
    return RiverbetaModel(
        doc.id,
        json['riverName'] as String,
        json['sectionName'] as String,
        double.parse(json['difficulty'].toString()),
        (json['putInLocation'] == null)
            ? null
            : GeoFirePoint(json['putInLocation']['geopoint'].latitude,
                json['putInLocation']['geopoint'].longitude),
        (json['takeOutLocation'] == null)
            ? null
            : GeoFirePoint(json['takeOutLocation']['geopoint'].latitude,
                json['takeOutLocation']['geopoint'].longitude),
        json['minFlow'] as double,
        json['maxFlow'] as double,
        json['gaugeUnit'] as String,
        json['flowIncrement'] as double);
  }

  factory RiverbetaModel.fromJson(Map<String, dynamic> json) {
    return RiverbetaModel(
        json['id'] as String,
        json['riverName'] as String,
        json['sectionName'] as String,
        json['difficulty'] as double,
        (json['putInLocation'] == null)
            ? null
            : GeoFirePoint(json['putInLocation']['geopoint'].latitude,
                json['putInLocation']['geopoint'].longitude),
        (json['takeOutLocation'] == null)
            ? null
            : GeoFirePoint(json['takeOutLocation']['geopoint'].latitude,
                json['takeOutLocation']['geopoint'].longitude),
        json['minFlow'] as double,
        json['maxFlow'] as double,
        json['gaugeUnit'] as String,
        json['flowIncrement'] as double);
  }

  RiverbetaShortModel getRiverbetaShort() {
    return RiverbetaShortModel(id, riverName, sectionName, difficulty);
  }

  @override
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    //data['id'] = id;
    data['riverName'] = riverName;
    data['sectionName'] = sectionName;
    data['difficulty'] = difficulty;
    data['putInLocation'] = (putInLocation == null) ? null : putInLocation.data;
    data['takeOutLocation'] =
        (takeOutLocation == null) ? null : takeOutLocation.data;
    data['minFlow'] = minFlow;
    data['maxFlow'] = maxFlow;
    data['gaugeUnit'] = gaugeUnit;
    data['levelIncrement'] = flowIncrement;
    return data;
  }

  Map<String, dynamic> toJsonIncludeId() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['riverName'] = riverName;
    data['sectionName'] = sectionName;
    data['difficulty'] = difficulty;
    data['putInLocation'] = (putInLocation == null) ? null : putInLocation.data;
    data['takeOutLocation'] =
        (takeOutLocation == null) ? null : takeOutLocation.data;
    data['minFlow'] = minFlow;
    data['maxFlow'] = maxFlow;
    data['gaugeUnit'] = gaugeUnit;
    data['levelIncrement'] = flowIncrement;
    return data;
  }
}
